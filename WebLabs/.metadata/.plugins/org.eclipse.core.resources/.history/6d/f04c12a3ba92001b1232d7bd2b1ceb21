package com;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


public class empDAO {
	private static final String driver = "oracle.jdbc.driver.OracleDriver";
	private static final String url = "jdbc:oracle:thin:@localhost:1521:XE";
	private static final String user = "bituser";
	private static final String pwd = "1004";
	// private Connection con;
	// private Statement stmt;
	// 회원 정보 조회 SQL문을 실행하여 조회한 레코드들의 컬럼 값을 다시 MemberVO객체의 속성에 설정한 다음
	// ArrayList에 저장하고 호출한 곳으로 반환

	private Connection con;
	private PreparedStatement pstmt;
	// prepareStatement 인터페이스를 사용하여 SQL문을 미리 컴파일하여 재사용하므로 빠르게 DB작업 수행
	// DB와 연동할 때 또는 빠른 반복 처리가 필요할때 이 인터페이스를 사용

	public List<MemberVO> listMembers() {
		List<MemberVO> list = new ArrayList()<MemberVO>();
		try {/*
				 * connDB(); //4가지 정보로 데이터베이스 연결 String query = "select * from t_member ";
				 * System.out.println(query); ResultSet rs = stmt.executeQuery(query); //SQL문으로
				 * 회원 정보를 조회
				 */
			connDB();
			
//			String query = "select * from t_member ";
//			System.out.println("PrepareStatement: " + query);
//			pstmt = con.prepareStatement(query);// preparestatement 객체 생성
//			ResultSet rs = pstmt.executeQuery();// executequery()로 미리 설정한 SQL문 실행
//			// preparestatement는 statement를 상속하므로 사용한 메서드를 그대로 사용
//
//			while (rs.next()) {
//				String id = rs.getString("id");
//				String pwd = rs.getString("pwd");
//				String name = rs.getString("name");
//				String email = rs.getString("email"); 
//				Date joinDate = rs.getDate("joinDate");
//				// 조회한 레코드의 각 컬럼 값을 받아 옴
//				MemberVO vo = new MemberVO();
//				vo.setId(id);
//				vo.setPwd(pwd);
//				vo.setName(name);
//				vo.setEmail(email);
//				vo.setJoinDate(joinDate); // 각 컬럼 값을 다시 MemberVO객체의 속성에 설정
//				list.add(vo); // 설정된 MemberVO객체를 다시 ArrayList에 저장
//			}
			rs.close();
			pstmt.close();
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list; // 조회한 레코드의 개수만큼 MemberVo 객체를 저장한 ArrayList를 반환
	}

	private void connDB() {
		try {
			Class.forName(driver);
			System.out.println("Oracle 드라이버 로딩 성공");
			con = DriverManager.getConnection(url, user, pwd);
			System.out.println("Connection 생성 성공");
			// stmt = con.createStatement();
			System.out.println("Statement 생성 성공");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
